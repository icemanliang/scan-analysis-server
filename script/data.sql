PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "demo_application" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "dept_code" TEXT NOT NULL DEFAULT '',
    "app_name" TEXT NOT NULL DEFAULT '',
    "app_tag" TEXT NOT NULL DEFAULT '',
    "app_desc" TEXT NOT NULL DEFAULT '',
    "app_repo" TEXT NOT NULL DEFAULT '',
    "app_branch" TEXT NOT NULL DEFAULT '',
    "app_owner" TEXT NOT NULL DEFAULT '',
    "app_config" TEXT,
    "app_status" INTEGER NOT NULL DEFAULT 1,
    "is_delete" INTEGER NOT NULL DEFAULT 0
);
INSERT INTO demo_application VALUES(1,'GAME','domnb','(PC应用)','基础管理平台','https://github.com/icemanliang/code-demo.git','main','iceman',replace('{\n    codeDir: "src",\n    buildDir: "",\n    aliasConfig: {\n        "@src/*": ["src/*"],\n		"@assets/*": ["src/assets/*"],\n		"@less/*": ["src/assets/less/*"],\n		"@server/*": ["src/server/*"],\n		"@pages/*": ["src/pages/*"],\n		"@utils/*": ["src/utils/*"],\n		"@hooks": ["src/hooks/index"],\n		"@hooks/*": ["src/hooks/*"],\n    }\n}','\n',char(10)),1,0);
INSERT INTO demo_application VALUES(2,'GAME','ytns','(PC应用),(微前端)','采购系统平台','https://github.com/icemanliang/code-demo.git','main','bob',replace('{\n    codeDir: "src",\n    buildDir: "",\n    aliasConfig: {\n        "@src/*": ["./src/*"],\n        "@typing/*": ["./src/typings/*"]\n    }\n}','\n',char(10)),1,0);
INSERT INTO demo_application VALUES(3,'BUSINESS','mgts','(Mobile应用),(微前端)','移动管理系统','https://github.com/icemanliang/code-demo.git','main','james',replace('{\n    codeDir: "src",\n    buildDir: "",\n    aliasConfig: {\n        "lib/*": ["./src/lib/*"],\n        "common/*": ["./src/component/common/*"],\n        "component/*": ["./src/component/*"],\n        "source/*": ["./src/source/*"],\n        "server/*": ["./src/server/*"],\n        "typing/*": ["./src/typing/*"]\n    }\n}','\n',char(10)),1,0);
INSERT INTO demo_application VALUES(4,'GAME','wlts','(PC应用),(微前端)','配置管理系统','https://github.com/icemanliang/code-demo.git','main','wendy',replace('{\n    codeDir: "src",\n    buildDir: "",\n    aliasConfig: {\n        "src/*": ["./src/*"],\n        "component/*": ["./src/component/*"],\n        "lib/*": ["./src/lib/*"],\n        "middleware/*": ["./src/middleware/*"],\n        "styles/*": ["./src/component/styles/*"]\n    }\n}','\n',char(10)),1,0);
INSERT INTO demo_application VALUES(5,'BUSINESS','namark','(PC应用)','营销管理系统','https://github.com/icemanliang/code-demo.git','main','kevin',replace('{\n    codeDir: "src",\n    buildDir: "",\n    aliasConfig: {\n        "@src/*": ["./src/*"]\n    }\n}','\n',char(10)),1,0);
CREATE TABLE IF NOT EXISTS "demo_dept" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "dept_name" TEXT NOT NULL DEFAULT '',
    "dept_code" TEXT NOT NULL DEFAULT '',
    "app_ids" TEXT NOT NULL DEFAULT '',
    "is_delete" INTEGER NOT NULL DEFAULT 0
);
INSERT INTO demo_dept VALUES(1,'游戏研发部','GAME','1,2,4',0);
INSERT INTO demo_dept VALUES(2,'电商研发部','BUSINESS','3,5',0);
CREATE TABLE IF NOT EXISTS "demo_plugin" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "plugin_name" TEXT NOT NULL DEFAULT '',
    "plugin_desc" TEXT NOT NULL DEFAULT '',
    "plugin_status" INTEGER NOT NULL DEFAULT 0,
    "plugin_config" TEXT,
    "is_delete" INTEGER NOT NULL DEFAULT 0
);
INSERT INTO demo_plugin VALUES(1,'eslint-check-plugin','ES规范检查插件',1,replace('{\n  // 解析器配置\n  parserOptions: {\n    ecmaVersion: "latest",\n    sourceType: "module",\n    requireConfigFile: false,\n    babelOptions: {\n      babelrc: false,\n      configFile: false,\n      // presets: ["@babel/preset-env"],\n    },\n    ecmaFeatures: { jsx: true },\n    allowImportExportEverywhere: false,\n  },\n\n  // 设置\n  settings: {\n    react: {\n      version: "detect"  // 自动检测React版本\n    }\n  },\n\n  // 环境配置\n  env: {\n    browser: true,\n    node: true,\n    es2022: true,\n    es6: true\n  },\n\n  // 基础插件\n  basePlugins: ["react", "jsdoc", "unicorn"],\n\n  // 基础扩展\n  baseExtends: ["eslint:recommended"],\n\n  // 基础规则\n  baseRules: {\n    // 函数必须包含注释说明(自定义插件)\n    "require-any-comment": ["error"],\n    // 设置jsdoc注释要求\n    // "jsdoc/require-jsdoc": ["error", {\n    //     "require": {\n    //       "FunctionDeclaration": true,\n    //       "MethodDefinition": true,\n    //       "ClassDeclaration": true,\n    //       "ArrowFunctionExpression": true,\n    //       "FunctionExpression": false\n    //     }\n    // }],\n    "jsdoc/require-description": ["warn", {\n      "descriptionStyle": "tag"\n    }],\n    "jsdoc/require-param-description": ["warn"],\n    "jsdoc/require-param": ["warn"],\n    "jsdoc/require-param-type": ["warn"],\n    "jsdoc/require-param-name": ["warn"],\n    "jsdoc/check-types": ["warn"],\n    "jsdoc/valid-types": ["warn"],\n    "jsdoc/require-returns": ["warn"],\n    "jsdoc/require-returns-check": ["warn"],\n    "jsdoc/require-returns-type": ["warn"],\n\n    // React 规则\n    "react/no-multi-comp": "error",\n\n    // 通用规则\n    "no-var": "error",\n    "eqeqeq": "error",\n    "max-depth": ["error", 5],\n    "max-lines-per-function": ["error", { "max": 150, "skipBlankLines": true, "skipComments": true }],\n    "max-lines": ["error", { "max": 500, "skipBlankLines": true, "skipComments": true }],\n    "no-with": "error",\n    "no-eval": "error",\n\n    // 文件名规则\n    "unicorn/filename-case": ["error", { "case": "kebabCase" }]\n  },\n\n  // TypeScript 特定规则\n  tsRules: {\n    "@typescript-eslint/naming-convention": [\n      "error",\n      {\n        selector: "variable",\n        format: ["camelCase", "UPPER_CASE", "PascalCase"],\n        leadingUnderscore: "allow"\n      },\n      {\n        selector: "function",\n        format: ["camelCase", "PascalCase"]\n      },\n      {\n        selector: "class",\n        format: ["PascalCase"]\n      },\n      {\n        selector: "interface",\n        format: ["PascalCase"],\n        prefix: ["I"]\n      },\n      {\n        selector: "typeAlias",\n        format: ["PascalCase"]\n      },\n      {\n        selector: "enum",\n        format: ["PascalCase"]\n      }\n    ],\n    "@typescript-eslint/no-unused-vars": ["error", {\n      vars: "all",\n      varsIgnorePattern: "^_",\n      args: "all",\n      ignoreRestSiblings: false,\n      argsIgnorePattern: "^_",\n      destructuredArrayIgnorePattern: "^_",\n      caughtErrors: "all",\n      caughtErrorsIgnorePattern: "^_"\n    }]\n  },\n\n  // Vue 特定规则\n  vueRules: {\n    "vue/script-setup-uses-vars": "error",\n    "vue/no-unused-components": "error",\n    "vue/component-name-in-template-casing": ["error", "PascalCase"],\n    "vue/component-definition-name-casing": ["error", "PascalCase"],\n    "vue/match-component-file-name": ["error", {\n      extensions: ["vue"],\n      shouldMatchCase: true\n    }],\n    "vue/block-order": ["error", {\n      order: ["template", "script", "style"]\n    }],\n    "vue/no-v-html": "error"\n  },\n\n  // 添加忽略配置\n  ignore: {\n    patterns: [\n      "**/node_modules/**",\n      "**/dist/**",\n      "**/build/**",\n      "**/coverage/**",\n      "**/.git/**",\n      "**/*.js",\n      "**/*.js",\n      "**/vendor/**",\n      "**/__tests__/**",\n      "**/*.test.{js,jsx,ts,tsx}",\n      "**/*.spec.{js,jsx,ts,tsx}",\n      "**/test/**",\n      "**/tests/**",\n      "**/*.ts"\n    ],\n    dotFiles: true,\n    file: ".eslintignore"\n  }\n}','\n',char(10)),0);
INSERT INTO demo_plugin VALUES(3,'stylelint-check-plugin','CSS规范检查插件',1,replace('{\n  // 文件配置\n  files: [\n    { pattern: "src/**/*.less", syntax: "postcss-less" },\n    { pattern: "src/**/*.scss", syntax: "postcss-scss" },\n    { pattern: "src/**/*.css", syntax: null }\n  ],\n\n  // glob 配置\n  glob: {\n    followSymbolicLinks: false,\n    deep: 5\n  },\n\n  // stylelint 配置\n  stylelint: {\n    rules: {\n      "max-nesting-depth": 5,   // 最大嵌套深度\n      "selector-max-id": 0,      // 最大id选择器数量\n      "selector-class-pattern": "^[a-z][a-zA-Z0-9]+$", // 类名必须小写\n      "declaration-block-single-line-max-declarations": 1, // 单行最大声明数量\n      "color-hex-case": "lower", // 十六进制颜色必须小写\n      "color-no-invalid-hex": true, // 十六进制颜色必须有效\n      "declaration-block-no-duplicate-properties": true, // 禁止重复属性\n      "block-no-empty": true, // 禁止空块\n    }\n  }\n}','\n',char(10)),0);
INSERT INTO demo_plugin VALUES(4,'count-check-plugin','代码可读性检查插件',1,replace('{\n  // 忽略的文件和目录\n  ignore: {\n    patterns: [\n      "**/__tests__/**",\n      "**/*.ts(x)",\n      "**/*.js(x)",\n      "**/node_modules/**",\n      "**/dist/**"\n    ]\n  },\n\n  // API 检测配置\n  api: {\n    // DOM API 检测对象\n    dom: ["document", "window"],\n    // BOM API 检测对象\n    bom: ["window", "navigator", "screen", "history"]\n  },\n\n  // 函数检测配置\n  function: {\n    // Hook 函数前缀\n    hookPrefix: "use",\n    // 是否跳过 Hook 函数的类型检查\n    skipHookTypeCheck: true\n  },\n\n  // React 组件检测配置\n  react: {\n    // 基类名称\n    componentBaseClasses: ["Component", "Component"],\n    // 必需的方法\n    requiredMethods: ["render"]\n  }\n}','\n',char(10)),0);
INSERT INTO demo_plugin VALUES(5,'config-check-plugin','工程配置检查插件',1,replace('{\n  // 检查项开关配置\n  checks: {\n    commitlint: true,\n    prettier: true,\n    readme: true,\n    npmrc: true,\n    eslint: true,\n    tsconfig: true,\n    nodeVersion: true,\n    editorconfig: true,\n    packageJson: true,\n    license: false,\n    ignoreFiles: false,\n    browserslist: true,\n  },\n\n  // commitlint 相关配置\n  commitlint: {\n    possibleFiles: [\n      "config.js",\n      ".commitlintrc",\n      ".js",\n      ".json"\n    ],\n    requiredExtends: ["@commitlint/config-conventional"]\n  },\n\n  // prettier 相关配置\n  prettier: {\n    possibleFiles: [\n      ".prettierrc",\n      ".json",\n      ".js",\n      "config.js"\n    ],\n    expectedConfig: {\n      singleQuote: true,\n      tabWidth: 2,\n      trailingComma: "all",\n      printWidth: 100\n    }\n  },\n\n  // eslint 相关配置\n  eslint: {\n    possibleFiles: [\n      ".js",\n      ".json", \n      ".yaml",\n      ".yml",\n      ".eslintrc"\n    ], \n    customConfig: "@iceman/eslint-config",\n    parser: {\n      typescript: "@typescript-eslint/parser",\n      javascript: "@babel/eslint-parser"\n    },\n    validReactConfigs: [\n      ["airbnb", "airbnb/hooks"],\n      ["eslint:recommended", "plugin:react/recommended", "plugin:react-hooks/recommended"]\n    ],\n    validVueConfigs: [\n      "plugin:vue/recommended",\n      "eslint:recommended"\n    ],\n    dependencies: {\n      react: ["react", "react-dom"],\n      vue: ["vue"]\n    }\n  },\n\n  // editorconfig 相关配置\n  editorconfig: {\n    expectedConfigs: {\n      "root = true": false,\n      "[*]": false,\n      "indent_style = space": false,\n      "indent_size = 4": false,\n      "end_of_line = lf": false,\n      "charset = utf-8": false,\n      "trim_trailing_whitespace = true": false,\n      "insert_final_newline = true": false\n    }\n  },\n\n  // ignore 文件相关配置\n  ignoreFiles: {\n    files: [\n      ".npmignore",\n      ".eslintignore",\n      ".stylelintignore",\n      ".prettierignore"\n    ],\n    rules: {\n      ".eslintignore": ["src/**/*.ts", "src/**/*.css"],\n      ".prettierignore": [\n        "**/*.md",\n        "**/*.svg",\n        "**/*.ejs",\n        "**/*.html",\n        "json",\n        "node_modules",\n        "dist",\n        "build",\n        ".DS_Store",\n        "*.log"\n      ],\n      ".stylelintignore": [\n        "*.ts",\n        "*.tsx",\n        "*.ejs",\n        "*.html",\n        "node_modules",\n        "dist",\n        "build"\n      ],\n      ".npmignore": [\n        "node_modules",\n        "site",\n        ".DS_Store"\n      ]\n    }\n  },\n\n  // json 相关配置\n  packageJson: {\n    namePattern: /^[a-z]+(-[a-z]+)*$/,\n    requiredFields: {\n      name: "全小写字母，可使用中线连接多段全小写字母",\n      description: "不能为空",\n      packageManager: "不能为空"\n    },\n    requiredScripts: ["lint", "build", "prepare"],\n    packageManagerPattern: /^(npm|yarn|pnpm)@(\\d+\\.\\d+\\.\\d+)$/,\n    prepareShouldInclude: "husky install",\n    lintStagedRequired: true,\n    lintStagedConfig: {\n      "*.{js,jsx,ts,tsx}": ["eslint --fix"],\n      "*.{js,jsx}": ["eslint --fix"],\n      "*.{ts,tsx}": ["eslint --fix"],\n      "*.{js,jsx,vue}": ["eslint --fix"],\n      "*.{ts,tsx,vue}": ["eslint --fix"]\n    },\n    npmPackageFields: {\n      version: "必须是有效的 semver 版本",\n      main: "不能为空",\n      module: "不能为空",\n      license: "不能为空",\n      keywords: "必须是一个数组"\n    }\n  },\n\n  // browserslist 相关配置\n  browserslist: {\n    requiredConfigs: [\n      "> 1%",\n      "last 2 versions",\n      "not dead"\n    ]\n  },\n\n  // npmrc 相关配置\n  npmrc: {\n    registryDomain: "https://iceman.cn"\n  },\n\n  // node 版本相关配置\n  nodeVersion: {\n    versionPattern: /^\\d+\\.\\d+\\.\\d+$/\n  },\n\n  // tsconfig 相关配置\n  tsconfig: {\n    compilerOptions: {\n      target: "esnext",\n      module: "esnext",\n      allowJs: true,\n      strict: true,\n      outDir: "./dist",\n      jsx: "react",\n      noUnusedLocals: true,\n      noUnusedParameters: true,\n      noImplicitReturns: true,\n      resolveJsonModule: true,\n      moduleResolution: "node",\n      esModuleInterop: true,\n      forceConsistentCasingInFileNames: true,\n      noImplicitAny: true,\n      skipLibCheck: true,\n      lib: ["esnext", "dom", "WebWorker"]\n    }\n  },\n\n  // license 相关配置\n  license: {\n    validLicenses: [\n      "MIT",\n      "Apache-0", \n      "BSD-3-Clause",\n      "BSD-2-Clause",\n      "ISC"\n    ]\n  },\n\n  // readme 相关配置\n  readme: {\n    requiredSections: [\n      "业务介绍",\n      "依赖环境",\n      "本地调试",\n      "目录结构",\n      "配置文件",\n      "部署方案",\n      "访问地址",\n      "监控接入",\n      "框架工具",\n      "API文档",\n      "自测流程",\n      "合流规范"\n    ]\n  }\n}','\n',char(10)),0);
INSERT INTO demo_plugin VALUES(6,'git-check-plugin','Git规范检查插件',1,replace('{\n  // 命名规范配置\n  naming: {\n    // 文件和目录命名规则（正则表达式）\n    patterns: {\n      // 纯小写\n      lowercase: /^[a-z]+$/,\n      // kebab-case\n      kebabCase: /^[a-z]+(-[a-z]+)*$/\n    },\n    ignoreDirectories: [\n      "__tests__",\n      "__test__",\n    ],\n    whitelist: [\n      ".ts",\n      "vue",\n      "tsx",\n      "css",\n      "gif",\n      "png",\n      "jpg",\n      "jpeg",\n      "svg"\n    ]\n  },\n\n  // Git 相关配置\n  git: {\n    // commit message 规范\n    commitMessagePattern: /^(Merge\\s+branch\\s+.*|(\\[[a-zA-Z]+(?:-[a-zA-Z]+)*-\\d+\\]\\s+(feat|fix|docs|style|refactor|test|chore)(\\([a-z-]+\\))?: .+))$/,\n    // 获取最近的 commit 数量\n    recentCommitsCount: 10,\n    // 必需的 husky hooks\n    requiredHooks: ["commit-msg", "pre-commit", "pre-push"],\n    // 必需的 gitignore 项\n    requiredIgnores: [\n      "logs",\n      "*.log",\n      "node_modules",\n      "dist/",\n      ".DS_Store"\n    ]\n  },\n\n  directory: {\n    maxAllowedDepth: 5  // 建议最大目录深度\n  }\n}','\n',char(10)),0);
INSERT INTO demo_plugin VALUES(7,'package-check-plugin','Npm包检查插件',1,replace('{\n  // 私有包前缀\n  privatePackagePrefix: ["@iceman", "@base"],\n  // 风险阈值\n  riskThreshold: {\n    // 是否进行检查\n    isCheck: true,\n    // 包信息API\n    packageInfoApi: "https://npmjs.org/",\n    // 下载信息API\n    downloadInfoApi: "https://npmjs.org/downloads/point/last-month/",\n    // 超时时间\n    apiTimeout: 3000,\n    // 白名单包\n    whiteList: ["lodash"],\n    // 长时未更新包时间范围判断阈值\n    lastUpdateMonths: 48,\n    // 小众包每月下载量判断阈值\n    monthlyDownloads: 1000\n  },\n  // 许可证\n  licenses: {\n    safe: [\n      "MIT", \n      "ISC", \n      "BSD-2-Clause",\n      "BSD-3-Clause", \n      "Apache-0",\n      "CC0-0",\n      "0BSD"\n    ],\n    risky: [\n      "GPL-0",\n      "GPL-0",\n      "AGPL-0",\n      "LGPL-1",\n      "LGPL-0",\n      "MPL-0",\n      "CPAL-0",\n      "EPL-0",\n      "EPL-0"\n    ]\n  },\n  // 相似包\n  similarPackages: [\n    // 日期处理\n    ["moment", "dayjs", "date-fns"],\n    // HTTP 请求\n    ["axios", "request", "node-fetch"],  \n    // 状态管理\n    ["redux", "mobx", "vuex"],\n    // 测试框架\n    ["jest", "mocha", "vitest"],\n    // E2E 测试\n    ["cypress", "playwright", "puppeteer"],\n    // 打包工具\n    ["webpack", "rollup", "parcel", "esbuild", "vite"],\n    // 进程管理\n    ["pm2", "forever", "nodemon", "supervisor"],\n    // 日志工具\n    ["winston", "bunyan", "pino", "log4js"],\n  ],\n  // 版本升级\n  versionUpgrades: {\n    // 构建工具\n    "webpack": {\n      minVersion: "0.0",\n      message: "建议升级到 webpack 5 以获得更好的构建性能和模块联邦特性"\n    },\n    // 框架相关\n    "react": {\n      minVersion: "8.2",\n      message: "建议升级到支持 Hooks 的 React 版本"\n    },\n    "react-dom": {\n      minVersion: "8.2",\n      message: "建议与 React 版本保持一致，升级到支持 Hooks 的版本"\n    },\n    "husky": {\n      minVersion: "0.0",\n      message: "建议升级到 husky v8+ 以使用新的配置方式和更好的 Git Hooks 支持"\n    },\n    "typescript": {\n      minVersion: "5.0",\n      message: "建议升级到 TypeScript 5+ 以获得更好的类型推导和语言特性"\n    },\n    "eslint": {\n      minVersion: "0.0",\n      message: "建议升级到 ESLint 8 以获得更好的性能和规则支持"\n    },\n    "prettier": {\n      minVersion: "0.0",\n      message: "建议升级到 Prettier 2+ 以获得更好的格式化支持"\n    }\n  }\n}','\n',char(10)),0);
INSERT INTO demo_plugin VALUES(8,'redundancy-check-plugin','代码重复检查插件',1,replace('{\n  // 重复代码检测配置\n  detection: {\n    minLines: 15,      // 最小重复行数\n    minTokens: 50,     // 最小重复token数\n    mode: "mild"       // 检测模式：strict/mild/weak\n  },\n  // 最大检测文件数, 防止内存溢出\n  maxFilesLimit: 12000,\n\n  // 文件匹配配置\n  files: {\n    patterns: "**/*.{js,ts,jsx,tsx}",  // 文件匹配模式\n    ignore: [                          // 忽略的文件/目录\n      "**/node_modules/**",\n      "**/dist/**",\n      "**/build/**",\n      "**/public/**"\n    ]\n  }\n}','\n',char(10)),0);
INSERT INTO demo_plugin VALUES(9,'dependency-check-plugin','依赖检查分析插件',1,replace('{\n  compilerOptions: {\n    allowJs: true,\n    jsx: "react",\n    resolveJsonModule: true,\n    moduleResolution: "node",\n  },\n  ignoreMatch: ["src/component/", "__tests__/"]\n}','\n',char(10)),0);
INSERT INTO demo_plugin VALUES(10,'quality-analysis-plugin','应用质量分析插件',1,replace('{\n  // 评分维度配置\n  scoreDimensions: {\n    eslint: {\n      avgIssues: {\n        maxScore: 18, // ESLint 错误评分的最高分\n        errorWeight: 7, // error 级别问题的权重\n        warningWeight: 3, // warning 级别问题的权重\n        maxErrorsPerFile: 3, // 单文件允许的最大 error 数，超过后得0分\n        maxWarningsPerFile: 3 // 单文件允许的最大 warning 数，超过后得0分\n      },\n      fileRatio: {\n        maxScore: 4 // ESLint 检查文件覆盖率评分的最高分\n      }\n    },\n    stylelint: {\n      avgErrors: {\n        maxScore: 4, // StyleLint 错误评分的最高分\n        maxErrorsPerFile: 6 // 单文件允许的最大错误数，超过后得0分\n      },\n      fileRatio: {\n        maxScore: 2 // StyleLint 检查文件覆盖率评分的最高分\n      }\n    },\n    duplication: {\n      maxLines: {\n        maxScore: 5, // 代码重复行数评分的最高分\n        threshold: 30, // 允许的最大重复行数阈值\n        penaltyFactor: 100 // 超过阈值后的惩罚系数，越大惩罚越小\n      },\n      filesRatio: {\n        maxScore: 3 // 重复文件占比评分的最高分\n      },\n      itemsRatio: {\n        maxScore: 2 // 重复项占比评分的最高分\n      }\n    },\n    directory: {\n      depth: {\n        maxScore: 2, // 目录深度评分的最高分\n        maxDepth: 5 // 允许的最大目录深度，超过后得0分\n      },\n      deep: {\n        maxScore: 2, // 深层目录数量评分的最高分\n        maxCount: 10 // 允许的最大深层目录数量，超过后按比例扣分\n      }\n    },\n    node: {\n      version: {\n        maxScore: 2, // js 版本评分的最高分\n        recommended: 20, // 推荐的 js 版本，达到或超过得满分\n        minimum: 18 // 最低可接受的 js 版本，低于此版本得0分\n      }\n    },\n    git: {\n      commitMessage: {\n        maxScore: 1 // Git 提交信息规范评分的最高分\n      },\n      huskyCheck: {\n        maxScore: 1 // Husky 检查配置评分的最高分\n      }\n    },\n    config: {\n      errors: {\n        maxScore: 10, // 配置错误评分的最高分\n        maxErrors: 20 // 允许的最大配置错误数，超过后按比例扣分\n      },\n      readme: {\n        maxScore: 2, // readme 配置评分的最高分\n      },\n      packageJson: {\n        maxScore: 1, // packageJson 配置评分的最高分\n      },\n      npmrc: {\n        maxScore: 1, // npmrc 配置评分的最高分\n      },\n      nodeVersion: {\n        maxScore: 1, // node 版本配置评分的最高分\n      },\n      packageManager: {\n        maxScore: 1, // 包管理器选择评分的最高分\n        preferredType: "pnpm" // 推荐使用的包管理器，使用其他工具得0分\n      }\n    },\n    codeQuality: {\n      generatorFunctions: {\n        maxScore: 3 // 生成器函数使用评分的最高分\n      },\n      classComponents: {\n        maxScore: 3 // 类组件使用评分的最高分\n      },\n      tFunctionCalls: {\n        maxScore: 3 // t 函数调用评分的最高分\n      },\n      missingTypes: {\n        maxScore: 3 // 类型完整性评分的最高分\n      },\n      typeScriptUsage: {\n        maxScore: 3 // TypeScript 使用率评分的最高分\n      },\n      invalidNames: {\n        maxScore: 3,\n        threshold: 01,        // 允许的不规范命名文件/目录数量阈值\n        penaltyFactor: 2    // 超过阈值后的惩罚系数\n      }\n    },\n    apis: {\n      bom: {\n        maxScore: 3,\n        threshold: 1,        // 每个文件平均允许的 BOM API 调用次数阈值\n        penaltyFactor: 5     // 超过阈值后的惩罚系数\n      },\n      dom: {\n        maxScore: 3,\n        threshold: 1,        // 每个文件平均允许的 DOM API 调用次数阈值\n        penaltyFactor: 5     // 超过阈值后的惩罚系数\n      }\n    },\n    packages: {\n      similar: {\n        maxScore: 1 // 相似依赖包评分的最高分\n      },\n      risk: {\n        maxScore: 3,\n        threshold: 3,  // 风险包数量阈值\n        penaltyFactor: 10  // 惩罚系数\n      },\n      update: {\n        maxScore: 2 // 可更新依赖包评分的最高分\n      }\n    }\n  }\n}','\n',char(10)),0);
CREATE TABLE IF NOT EXISTS "demo_task" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "task_code" TEXT NOT NULL DEFAULT '',
    "app_ids" TEXT NOT NULL DEFAULT '',
    "plugin_ids" TEXT NOT NULL DEFAULT '',
    "task_status" INTEGER NOT NULL DEFAULT 0,
    "task_log" TEXT,
    "task_date" DATETIME NOT NULL DEFAULT '1970-01-01 08:00:01',
    "cost_time" INTEGER NOT NULL DEFAULT 0,
    "is_delete" INTEGER NOT NULL DEFAULT 0
);
CREATE TABLE IF NOT EXISTS "demo_result" (
    "id" INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    "task_id" INTEGER NOT NULL,
    "task_date" DATETIME NOT NULL DEFAULT '1970-01-01 08:00:01',
    "cost_time" INTEGER NOT NULL DEFAULT 0,
    "app_id" INTEGER NOT NULL DEFAULT 0,
    "result_json" TEXT,
    "result_log" TEXT,
    "commit_id" TEXT NOT NULL DEFAULT '',
    "is_delete" INTEGER NOT NULL DEFAULT 0,
    CONSTRAINT "demo_result_task_id_fkey" FOREIGN KEY ("task_id") REFERENCES "demo_task" ("id") ON DELETE RESTRICT ON UPDATE CASCADE
);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('demo_dept',8);
INSERT INTO sqlite_sequence VALUES('demo_plugin',10);
INSERT INTO sqlite_sequence VALUES('demo_application',48);
INSERT INTO sqlite_sequence VALUES('demo_task',25);
INSERT INTO sqlite_sequence VALUES('demo_result',63);
COMMIT;
